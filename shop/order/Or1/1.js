// ===== EASYPRINT ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (OR1) ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠ Cart =====

(function() { // scope ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô global

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Notification ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ---
  function goToNotification() {
    window.location.href = "../../Notification/Notification.html";
  }
  function goNextEditProfile() {
    window.location.href = "../Edit_profile/Edit_profile.html";
  }

  // --- Toggle ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô ---
  const switchInput = document.querySelector(".switch input");
  if (switchInput) {
    switchInput.addEventListener("change", function () {
      alert(this.checked ? "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" : "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    });
  }

  // --- Toggle Profile Popup ---
  function toggleProfilePopup() {
    const popup = document.getElementById("profilePopup");
    if (popup) popup.classList.toggle("show");
  }
  window.addEventListener("click", function (e) {
    const popup = document.getElementById("profilePopup");
    if (popup && !document.querySelector(".profile-icon").contains(e.target)) {
      popup.classList.remove("show");
    }
  });

  // ===== EASYPRINT Shared Helpers =====
  function EP_getOrders() {
    try {
      const raw = localStorage.getItem("orders");
      if (!raw) return {};
      const obj = JSON.parse(raw);
      return obj && typeof obj === "object" ? obj : {};
    } catch (e) {
      console.error("EP_getOrders parse error:", e);
      return {};
    }
  }

  function EP_computeCounts(orders) {
    const counts = {
      all: 0,
      waiting: 0,
      confirmed: 0,
      printing: 0,
      preparing: 0,
      sent: 0,
    };
    Object.keys(orders).forEach((id) => {
      counts.all += 1;
      const st = (orders[id].status || "").toLowerCase();
      if (counts.hasOwnProperty(st)) counts[st] += 1;
    });
    return counts;
  }

  function EP_updateFilterCounts() {
    const orders = EP_getOrders();
    const c = EP_computeCounts(orders);
    const container = document.querySelector(".order-filters");
    if (!container) return;

    const map = {
      "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "all",
      "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà": "waiting",
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå": "confirmed",
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå": "printing",
      "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á": "preparing",
      "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß": "sent",
    };

    container.querySelectorAll("a.filter-btn").forEach((a) => {
      const label = a.textContent.replace(/\d+/g, "").trim();
      let chosen = null;
      for (const th in map) if (label.startsWith(th)) { chosen = map[th]; break; }
      const span =
        a.querySelector("span") ||
        (() => {
          const s = document.createElement("span");
          a.appendChild(s);
          return s;
        })();
      if (chosen && c.hasOwnProperty(chosen)) span.textContent = c[chosen];
    });
  }

  // --- Render Orders ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (waiting) ---
  function renderOrders() {
    const tbody = document.querySelector(".order-table tbody");
    if (!tbody) return;

    const orders = EP_getOrders();
    tbody.innerHTML = "";

    Object.keys(orders).forEach((orderId) => {
      const data = orders[orderId];
      if (data.status !== "waiting") return;

      const previewContent = data.image
        ? `<img src="${data.image}" 
                alt="preview" 
                class="preview-img" 
                data-full="${data.image}" 
                style="width:80px; height:auto; object-fit:contain;">`
        : `<span style="color:red;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û</span>`;

      const row = document.createElement("tr");
      row.classList.add("order-row");
      row.innerHTML = `
        <td>${orderId}</td>
        <td><span class="status waiting">‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß</span></td>
        <td><b>${data.customer}</b></td>
        <td>${data.product}</td>
        <td>${data.quantity}</td>
        <td class="order-preview">${previewContent}</td>
        <td>
          ${data.total} <br>
          <button class="confirm-btn payment" data-target="#paymentPopup-${orderId}" style="margin-top:5px;">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</button>
        </td>
        <td class="order-actions-cell">
          <button class="confirm-btn confirm-order" data-id="${orderId}">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</button>
          <div class="icon-group">
            <button class="icon-btn" data-tooltip="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠">üìù</button>
            <button class="icon-btn stop" data-tooltip="‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà">üñ®Ô∏è</button>
          </div>
        </td>
      `;
      tbody.appendChild(row);

      // --- popup Payment ---
      if (!document.getElementById(`paymentPopup-${orderId}`)) {
        const paymentPopup = document.createElement("div");
        paymentPopup.classList.add("popup");
        paymentPopup.id = `paymentPopup-${orderId}`;
        paymentPopup.innerHTML = `
          <div class="popup-header">
            <span>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</span>
            <div class="header-right">
              <button id="closePopup">&times;</button>
            </div>
          </div>
          <div class="popup-content">
            <div class="slip-header">
              <h4>‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h4>
              <button class="status-btn">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
            </div>
            <div class="content-row">
              <div class="slip-box">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</div>
              <div class="order-details">
                <div><b>#${orderId}</b></div>
                <div>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ : ${data.customer}</div>
                <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${data.date?.split(" ")[0] || "-"}</div>
                <div>‡πÄ‡∏ß‡∏•‡∏≤ : ${data.date?.split(" ")[1] || "-"} ${data.date?.split(" ")[2] || ""}</div>
                <div><b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° : ${data.total}</b></div>
              </div>
            </div>
          </div>
        `;
        document.body.appendChild(paymentPopup);
      }
    });

    EP_updateFilterCounts();
  }

  // --- Event Delegation ---
  const tbody = document.querySelector(".order-table tbody");
  if(tbody){
    tbody.addEventListener("click", (e) => {
      const target = e.target;
      const orders = EP_getOrders();

      if (target.closest(".payment")) {
        const popupId = target.closest(".payment").getAttribute("data-target");
        const popup = document.querySelector(popupId);
        if (popup) popup.style.display = "block";
        return;
      }

      if (target.closest(".confirm-order")) {
        const orderId = target.closest(".confirm-order").dataset.id;
        if (orders[orderId]) {
          orders[orderId].status = "confirmed";
          localStorage.setItem("orders", JSON.stringify(orders));
          renderOrders();
          EP_updateFilterCounts();
        }
        return;
      }

      if (target.closest(".icon-btn")) {
        const btn = target.closest(".icon-btn");
        const row = btn.closest("tr");
        const orderId = row.querySelector("td:first-child").textContent.trim();
        const data = orders[orderId];
        if (!data) return;

        // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        if (btn.dataset.tooltip === "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠") {
          let existingPopup = document.getElementById(`detailsPopup-${orderId}`);
          if (!existingPopup) {
            const detailsPopup = document.createElement("div");
            detailsPopup.classList.add("popup");
            detailsPopup.id = `detailsPopup-${orderId}`;
            detailsPopup.innerHTML = `
              <div class="popup-header">
                <span>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${orderId}</span>
                <div class="header-right">
                  <button class="closeDetailsPopup">&times;</button>
                </div>
              </div>
              <div class="popup-content" style="padding:15px; color:#6c6c6c;"> 
                <p><b>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</b> ${data.customer}</p>
                <p><b>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</b> ${data.product}</p>
                <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${data.quantity}</p>
                <p><b>‡∏ß‡∏±‡∏™‡∏î‡∏∏:</b> ${data.material || "-"}</p>
                <p><b>‡∏Ç‡∏ô‡∏≤‡∏î:</b> ${data.width || "-"} x ${data.height || "-"}</p>
                <p><b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</b> ${data.total}</p>
                <p><b>‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</b> ${data.delivery}</p>
                <p><b>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</b> ${data.address}</p>
                ${data.image ? `<img src="${data.image}" style="max-width:200px; display:block; margin:5px 0;">` : ""}
              </div>
            `;
            document.body.appendChild(detailsPopup);
            detailsPopup.querySelector(".closeDetailsPopup").onclick = () => detailsPopup.remove();
          } else {
            existingPopup.style.display = "block";
          }
        }

        // ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        if (btn.dataset.tooltip === "‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà") {
          const printContent = `
            <h3>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${orderId}</h3>
            <p><b>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</b> ${data.customer}</p>
            <p><b>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</b> ${data.address}</p>
            <p><b>‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö:</b> ${data.delivery}</p>
          `;
          const printWindow = window.open("", "", "height=400,width=600");
          printWindow.document.write("<html><head><title>‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</title></head><body>");
          printWindow.document.write(printContent);
          printWindow.document.write("</body></html>");
          printWindow.document.close();
          printWindow.print();
        }
      }

      if (target.closest(".preview-img")) {
        const src = target.closest(".preview-img").getAttribute("data-full") || target.closest(".preview-img").src;
        showPreviewImage(src);
      }
    });
  }

  // --- ‡∏õ‡∏¥‡∏î popup ---
  document.addEventListener("click", (e) => {
    if (e.target.id === "closePopup") {
      const popup = e.target.closest(".popup");
      if (popup) popup.style.display = "none";
    }
  });

  // --- preview image ---
  function showPreviewImage(src) {
    const overlay = document.createElement("div");
    overlay.style.cssText = `
      position:fixed; top:0; left:0; width:100%; height:100%;
      background:rgba(0,0,0,0.8); display:flex; align-items:center; justify-content:center;
      z-index:9999;
    `;
    overlay.innerHTML = `
      <img src="${src}" style="max-width:90%; max-height:90%; border:2px solid #fff; border-radius:8px;">
      <span style="position:absolute;top:20px;right:40px;font-size:30px;color:#fff;cursor:pointer;">&times;</span>
    `;
    document.body.appendChild(overlay);
    overlay.querySelector("span").onclick = () => overlay.remove();
  }

  // --- ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ ---
  document.addEventListener("DOMContentLoaded", () => {
    renderOrders();
    EP_updateFilterCounts();
  });

})();
